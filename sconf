#!/usr/bin/env python3

from pathlib import Path
import argparse
import difflib
import os
import re
import shutil
import stat
import subprocess
import sys
import tempfile

from colorama import init, Fore, Style
import jinja2
import jsonschema
import yaml

init(autoreset=True)

# TODO: check error prints tab index
RED = Fore.RED + Style.BRIGHT
GREEN = Fore.GREEN + Style.BRIGHT

BASE_PATH = Path('/etc/sconf')
MODULES_PATH = BASE_PATH.joinpath('modules')

# TODO: write schema validation for packages and services!
# TODO: write regex check for package, service and variables names!

SCHEMA = {
    'module_config': {
        '$schema': 'http://json-schema.org/draft/2019-09/schema#',
        'type': 'object',
        'properties': {
            'packages': {
                'type': 'object',
            },
            'services': {
                'type': 'object',
            },
            'variables': {
                'type': 'object',
            },
        },
        'additionalProperties': False,
    }
}


class Config:
    def __init__(self):
        for path in [BASE_PATH, MODULES_PATH]:
            if not path.exists():
                print(f'Directory { path } does not exist!')
                sys.exit(1)

    def _get_data(self, file_path, schema=None, context=None):
        data = None

        try:
            with open(file_path, 'r') as f:
                content = f.read()

                if context:
                    template = jinja2.Template(content)
                    content = template.render(**context)

                data = yaml.load(content, Loader=yaml.BaseLoader)

                if schema:
                    try:
                        jsonschema.validate(instance=data, schema=schema)
                    except jsonschema.exceptions.ValidationError as error:
                        print(error)
                        sys.exit(1)
        except IOError:
            print(f'{ file_path }')
            print(f'{ RED } YAML file can not be read!')
        except yaml.YAMLError as error:
            print(f'{ file_path }')
            print(f'{ RED } Failed loading config file because the YAML is invalid!')  # noqa
            print(error)

        return data

    def module_data(self, module, context=None):
        config_yaml = BASE_PATH.joinpath('modules', module, 'config.yaml')

        return self._get_data(
            config_yaml,
            schema=SCHEMA['module_config'],
            context=context,
        )

    def global_data(self, file_name):
        file_name = f'{ file_name }.yaml'
        data_yaml = BASE_PATH.joinpath('global', file_name)

        return self._get_data(data_yaml)


class Files:
    def __init__(self, config, module_path, context={}):
        if config is None:
            config = {}

        self.files = Path(module_path, 'files')

        if not self.files.is_dir():
            # TODO: print error
            pass

        self.context = {**context, **config.get('variables', {})}

    def _render_template(self, src):
        tmp = self._create_tempfile(src)
        content = None

        try:
            with open(src) as f:
                content = f.read()

                try:
                    if content:
                        template = jinja2.Template(content)
                        content = template.render(**self.context)
                except jinja2.exceptions.TemplateSyntaxError as error:
                    print(f'{ src }')
                    print(f'{ RED }{ error }')
                except jinja2.exceptions.UndefinedError as error:
                    print(f'{ src }')
                    print(f'{ RED }{ error }')
                    sys.exit(1)

            with open(tmp, 'w') as f:
                f.write(content)
        except IsADirectoryError as error:
            print(f'{ src }')
            print(f'{ RED }JINJA file is a directory!')

        return tmp

    def _create_tempfile(self, src):
        tmp = tempfile.NamedTemporaryFile(delete=False)
        tmp = Path(tmp.name)

        src = Path(src)
        src_stat = src.stat()

        tmp.chmod(src_stat.st_mode)
        shutil.chown(tmp, src.owner(), src.group())

        return tmp

    def _diff(self, src, dst):
        output = []

        try:
            text1 = open(dst, 'r').readlines()
            text2 = open(src, 'r').readlines()

            for line in difflib.unified_diff(text1, text2):
                if line.startswith('+'):
                    line = f'{ GREEN }{ line }'
                elif line.startswith('-'):
                    line = f'{ RED }{ line }'

                if not line.endswith('\n'):
                    line = f'{ line }\n'

                output.append(f'   { line }{ Style.RESET_ALL }')
        except UnicodeDecodeError:
            pass

        if output:
            output.insert(0, '\n')

        return ''.join(output)

    def _has_changed(self, src, dst):
        src_stat = src.stat()
        dst_stat = dst.stat()

        if src.is_dir() and not src.is_symlink():
            modified = False
        else:
            modified = src_stat.st_mtime > dst_stat.st_mtime

        owner_changed = src_stat.st_uid != dst_stat.st_uid
        group_changed = src_stat.st_gid != dst_stat.st_gid
        permission_changed = src_stat.st_mode != dst_stat.st_mode

        return any(
            [
                modified,
                owner_changed,
                group_changed,
                permission_changed,
            ]
        )

    def _owner_changed(self, src, dst):
        try:
            src_owner = src.owner()
            dst_owner = dst.owner()
        except KeyError as error:
            print(f'   ├─ { RED }{ error }')
            sys.exit(1)

        if src_owner != dst_owner:
            print(f'   ├─ Owner changed from { dst_owner } to { src_owner }')

    def _group_changed(self, src, dst):
        src_group = src.group()
        dst_group = dst.group()

        if src_group != dst_group:
            print(f'   ├─ Group changed from { dst_group } to { src_group }')

    def _permission_changed(self, src, dst):
        src_stat = src.stat()
        dst_stat = dst.stat()

        src_mode = oct(src_stat.st_mode)[4:]
        dst_mode = oct(dst_stat.st_mode)[4:]
        src_mode_hr = stat.filemode(src_stat.st_mode)
        dst_mode_hr = stat.filemode(dst_stat.st_mode)

        if src_mode != dst_mode:
            print(f'   ├─ Permission changed from { dst_mode } ({ dst_mode_hr }) to { src_mode } ({ src_mode_hr })')  # noqa

    def _get_original_src(self, src):
        if src.is_symlink():
            return os.readlink(src)

        return src

    def _copy(self, src, dst):
        shutil.copy2(src, dst, follow_symlinks=False)
        shutil.chown(dst, src.owner(), src.group())

    def _copy_file(self, src, dst):
        dst_name = str(dst)

        if src.suffix == '.jinja':
            tmp_src = self._render_template(src)

            dst_name = dst_name[:-6]
            dst = Path(dst_name)

        original_src = self._get_original_src(src)
        diff_output = None
        copy_file = False

        if dst.exists():
            has_changed = self._has_changed(src, dst)

            if has_changed:
                copy_file = True

                if src.suffix == '.jinja':
                    original_src = tmp_src

                diff_output = self._diff(original_src, dst)

                if src.is_symlink():
                    print(f'├─ Update symlink { dst_name }')
                else:
                    print(f'├─ Update file { dst_name }')

                self._owner_changed(src, dst)
                self._group_changed(src, dst)
                self._permission_changed(src, dst)
        else:
            copy_file = True

            if src.is_symlink():
                print(f'├─ Create symlink { dst_name }')
            else:
                print(f'├─ Create file { dst_name }')

        try:
            if copy_file is True:
                if src.suffix == '.jinja':
                    self._copy(tmp_src, dst)
                    tmp_src.unlink()
                else:
                    self._copy(src, dst)
        except FileExistsError as error:
            print(f'{ RED }File or directory already exists!')
        except FileNotFoundError as error:
            print(f'{ RED }File or directory does not exist!')

        if diff_output:
            print(diff_output)

    def copy(self, src=None):
        if src is None:
            src = self.files

        for name in src.iterdir():
            _src = src.joinpath(name)

            dst_path = str(_src.parent).replace(str(self.files), '') or '/'
            dst = Path(dst_path, _src.name)

            if _src.is_dir() and not _src.is_symlink():
                dst.mkdir(exist_ok=True)
                self.copy(_src)

                has_changed = self._has_changed(_src, dst)

                if has_changed:
                    dst_name = str(dst)

                    print(f'├─ Update directory { dst_name }')

                    self._owner_changed(_src, dst)
                    self._group_changed(_src, dst)
                    self._permission_changed(_src, dst)

                    shutil.copystat(_src, dst)
                    shutil.chown(dst, _src.owner(), _src.group())
            else:
                self._copy_file(_src, dst)


class Packages:
    @staticmethod
    def install(config):
        if config is None:
            return

        pkgs = config.get('packages', [])
        cmd = '/usr/bin/dpkg-query -W --showformat=\'${Status}\n\' %s'

        for pkg, pkg_options in pkgs.items():
            ensure = 'installed'

            if isinstance(pkg_options, dict):
                ensure = pkg_options.get('ensure', ensure)

            proc = subprocess.Popen(
                cmd % pkg,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
            )

            out = str(proc.communicate()[0])
            apt_cmd = None

            if ensure == 'installed':
                if 'install ok installed' not in out:
                    apt_cmd = 'install'
                    print(f'├─ Install package [{ pkg }]')
            elif ensure == 'purged':
                if 'install ok installed' in out:
                    apt_cmd = 'purge'
                    print(f'├─ Purge package [{ pkg }]')

            if apt_cmd:
                subprocess.call(
                    'sudo apt %s -y %s' % (
                        apt_cmd,
                        pkg,
                    ),
                    shell=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.STDOUT,
                )


class Services:
    def __init__(self, args):
        self.args = args

        cmd = 'sudo /bin/systemctl daemon-reload'

        subprocess.call(
            cmd,
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
        )

    def _status(self, service):
        cmd = '/bin/systemctl status %s' % service

        proc = subprocess.Popen(
            cmd,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )

        return proc.communicate()

    def check(self, config):
        if config is None:
            return

        services = config.get('services', {})

        for service, service_options in services.items():
            enabled = service_options.get('enabled', True)
            ensure = service_options.get('ensure', None)
            exists = self.exists(service)

            if not exists:
                print(f'{ RED } ├─ Service [{ service }] not exists!')
                sys.exit(1)

            is_active = self.is_active(service)
            is_enabled = self.is_enabled(service)

            if enabled is not None:
                if is_enabled is True and enabled == 'false':
                    self.command(service, 'disable')
                    print(f'├─ Service [{ service }] disabled')
                elif is_enabled is False and enabled == 'true':
                    self.command(service, 'enable')
                    print(f'├─ Service [{ service }] enabled')

            if ensure is not None:
                if is_active is True and ensure == 'stopped':
                    self.command(service, 'stop')
                    print(f'├─ Service [{ service }] stopped')
                elif is_active is False and ensure == 'running':
                    print(f'├─ Service [{ service }] started')
                    self.command(service, 'start')
                elif ensure == 'running':
                    if not self.args.no_service_restart:
                        print(f'├─ Service [{ service }] restarted')
                        self.command(service, 'restart')

    def exists(self, service):
        out, error = self._status(service)

        for line in str(out).split('\n'):
            search_obj = re.search(
                r'^.*Unit\s.*\scould\snot\sbe\sfound.*$',
                line,
                re.M | re.I,
            )

            if search_obj:
                return False

        return True

    def is_active(self, service):
        out, error = self._status(service)

        for line in str(out).split('\n'):
            search_obj = re.search(
                r'^.*Active:\sactive\s\((running|waiting|exited)\).*$',
                line,
                re.M | re.I,
            )

            if search_obj:
                return True

        return False

    def is_enabled(self, service):
        out, error = self._status(service)

        for line in str(out).split('\n'):
            search_obj = re.search(
                r'^.*Loaded:\sloaded\s(.*\s(static|enabled);\s.*).*$',
                line,
                re.M | re.I,
            )

            if search_obj:
                return True

        return False

    def command(self, service, status):
        cmd = 'sudo /bin/systemctl %s %s' % (status, service)

        proc = subprocess.Popen(
            cmd,
            shell=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
        )

        out, error = proc.communicate()


class ServerConf:
    def __init__(self, args):
        self.args = args
        self.variables = Config().global_data('variables')

    def install_modules(self):
        for module in MODULES_PATH.glob('*'):
            self.install_module(module)

    # TODO: Added YAML file for module install order and enable/disable option!
    def install_module(self, module):
        module_path = MODULES_PATH.joinpath(module)
        module_name = module_path.name

        if module_path.is_dir():
            print(f'{ Style.BRIGHT }Install { module_name } module')

            # TODO: Parameters to init
            config = Config().module_data(module, self.variables)

            Packages().install(config)

            Files(
                config=config,
                module_path=module_path,
                context=self.variables,
            ).copy()

            Services(self.args).check(config)
        else:
            print(f'{ RED }Cannot install module { module_name }!')


def arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        '-a',
        '--all-modules',
        action='store_true',
        help='Install all module'
    )

    parser.add_argument(
        '-m',
        '--module',
        help='Install module',
    )

    parser.add_argument(
        '-nsr',
        '--no-service-restart',
        action='store_true',
        help='Services are not restarted',
    )

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    server_conf = ServerConf(args)

    if args.all_modules:
        server_conf.install_modules()
    elif args.module:
        server_conf.install_module(args.module)


arguments()
